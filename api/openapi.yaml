openapi: 3.0.0
info:
  title: Book Recommendations API
  description: This is a simple API for book recommendations
  contact:
    email: email@youremail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/AUSTINLAMBDIN/Book-Recommendations-API/1.0.0
  description: SwaggerHub API
tags:
- name: admins
  description: Secured Admin-only API calls
- name: developers
  description: Operations available to regular developers
paths:
  /book:
    get:
      tags:
      - developers
      summary: searches books that have been recommended
      description: |
        By passing in the appropriate options, you can search for
        available books in the system
      operationId: searchBook
      parameters:
      - name: searchString
        in: query
        description: pass an optional search string for looking up a book
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          format: int32
      - name: limit
        in: query
        description: maximum number of records to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 0
          type: integer
          format: int32
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookItem'
                x-content-type: application/json
        "400":
          description: bad input parameter
      x-swagger-router-controller: Developers
    post:
      tags:
      - admins
      summary: adds a book recommendation
      description: Adds a book to the system
      operationId: addBook
      requestBody:
        description: Book to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookItem'
      responses:
        "201":
          description: book added
        "400":
          description: "invalid input, object invalid"
        "409":
          description: an existing item already exists
      x-swagger-router-controller: Admins
    delete:
      tags:
      - admins
      summary: removes books that have been recommended
      description: |
        By passing in the appropriate options, you can remove
        recommended books in the system
      operationId: deleteBook
      parameters:
      - name: searchString
        in: query
        description: pass an optional search string for looking up a book
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookItem'
                x-content-type: application/json
        "400":
          description: bad input parameter
      x-swagger-router-controller: Admins
    patch:
      tags:
      - admins
      summary: updates a mislabeled book
      description: Updates a mislabeled book in the system
      operationId: updateBook
      parameters:
      - name: bookId
        in: query
        description: ID of the book to update
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Updated book information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookItem'
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookItem'
                x-content-type: application/json
        "400":
          description: bad input parameter
      x-swagger-router-controller: Admins
components:
  schemas:
    BookItem:
      required:
      - title
      type: object
      properties:
        title:
          type: string
          example: Atomic Habits
        author:
          $ref: '#/components/schemas/Author'
      example:
        author:
          name: James Clear
        title: Atomic Habits
    Author:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: James Clear
      example:
        name: James Clear
